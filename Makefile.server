# Makefile pour déploiement serveur - SaaS Data Platform

.PHONY: help deploy stop restart logs clean test health urls

# Variables
COMPOSE_FILE = docker-compose.server.yml
PROJECT_NAME = saas-platform-server

# Couleurs pour les messages
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
BLUE = \033[0;34m
NC = \033[0m # No Color

help: ## Afficher l'aide pour le déploiement serveur
	@echo "$(GREEN)SaaS Data Platform - Serveur - Commandes disponibles$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(YELLOW)%-20s$(NC) %s\n", $$1, $$2}'

deploy: ## Déployer la plateforme sur le serveur
	@echo "$(GREEN)Déploiement de la plateforme sur le serveur...$(NC)"
	@./deploy-server.sh deploy

build: ## Construire toutes les images Docker pour le serveur
	@echo "$(GREEN)Construction des images Docker pour le serveur...$(NC)"
	docker-compose -f $(COMPOSE_FILE) build

up: ## Démarrer tous les services serveur
	@echo "$(GREEN)Démarrage des services serveur...$(NC)"
	docker-compose -f $(COMPOSE_FILE) up -d

up-build: ## Construire et démarrer tous les services serveur
	@echo "$(GREEN)Construction et démarrage des services serveur...$(NC)"
	docker-compose -f $(COMPOSE_FILE) up --build -d

down: ## Arrêter tous les services serveur
	@echo "$(RED)Arrêt des services serveur...$(NC)"
	docker-compose -f $(COMPOSE_FILE) down

stop: ## Arrêter tous les services serveur
	@echo "$(RED)Arrêt des services serveur...$(NC)"
	@./deploy-server.sh stop

restart: ## Redémarrer tous les services serveur
	@echo "$(YELLOW)Redémarrage des services serveur...$(NC)"
	docker-compose -f $(COMPOSE_FILE) restart

logs: ## Afficher les logs de tous les services serveur
	@./deploy-server.sh logs

logs-api: ## Afficher les logs de l'API Dashboard
	docker-compose -f $(COMPOSE_FILE) logs -f api-dashboard-service

logs-db: ## Afficher les logs de la base de données
	docker-compose -f $(COMPOSE_FILE) logs -f warehouse-service

logs-nifi: ## Afficher les logs de NiFi
	docker-compose -f $(COMPOSE_FILE) logs -f nifi-service

status: ## Afficher le statut de tous les services serveur
	docker-compose -f $(COMPOSE_FILE) ps

health: ## Vérifier la santé de tous les services serveur
	@./deploy-server.sh health

urls: ## Afficher les URLs d'accès aux services serveur
	@./deploy-server.sh urls

clean: ## Nettoyer les containers, images et volumes serveur
	@echo "$(RED)Nettoyage complet serveur...$(NC)"
	@./deploy-server.sh clean

clean-volumes: ## Nettoyer uniquement les volumes serveur
	@echo "$(RED)Nettoyage des volumes serveur...$(NC)"
	docker-compose -f $(COMPOSE_FILE) down -v

# Configuration serveur
setup: ## Configuration initiale du serveur
	@echo "$(GREEN)Configuration initiale du serveur...$(NC)"
	@if [ ! -f .env ]; then cp env.server.example .env; echo "Fichier .env créé - Veuillez l'adapter"; fi
	@mkdir -p logs uploads exports temp backups
	@echo "Configuration initiale terminée!"

env: ## Créer le fichier .env pour le serveur
	@echo "$(GREEN)Création du fichier .env pour le serveur...$(NC)"
	@cp env.server.example .env
	@echo "Fichier .env créé. Veuillez l'adapter selon vos besoins."

# Monitoring serveur
monitor: ## Démarrer le monitoring (Prometheus + Grafana)
	@echo "$(GREEN)Démarrage du monitoring serveur...$(NC)"
	docker-compose -f $(COMPOSE_FILE) up -d prometheus grafana

monitor-stop: ## Arrêter le monitoring
	@echo "$(RED)Arrêt du monitoring serveur...$(NC)"
	docker-compose -f $(COMPOSE_FILE) stop prometheus grafana

# Base de données serveur
db-init: ## Initialiser la base de données serveur
	@echo "$(GREEN)Initialisation de la base de données serveur...$(NC)"
	docker-compose -f $(COMPOSE_FILE) exec warehouse-service psql -U warehouse_user -d data_warehouse -f /docker-entrypoint-initdb.d/init.sql

db-backup: ## Sauvegarder la base de données serveur
	@echo "$(GREEN)Sauvegarde de la base de données serveur...$(NC)"
	docker-compose -f $(COMPOSE_FILE) exec warehouse-service pg_dump -U warehouse_user data_warehouse > backup_$(shell date +%Y%m%d_%H%M%S).sql

db-restore: ## Restaurer la base de données serveur (usage: make db-restore BACKUP_FILE=backup.sql)
	@echo "$(GREEN)Restauration de la base de données serveur...$(NC)"
	docker-compose -f $(COMPOSE_FILE) exec -T warehouse-service psql -U warehouse_user -d data_warehouse < $(BACKUP_FILE)

# Sécurité serveur
firewall: ## Configurer le pare-feu pour le serveur
	@echo "$(GREEN)Configuration du pare-feu serveur...$(NC)"
	@./deploy-server.sh firewall

ssl: ## Configuration SSL (nécessite des certificats)
	@echo "$(YELLOW)Configuration SSL - Vérifiez les certificats dans nginx/ssl/$(NC)"
	@if [ ! -f nginx/ssl/cert.pem ] || [ ! -f nginx/ssl/key.pem ]; then \
		echo "$(RED)Certificats SSL manquants dans nginx/ssl/$(NC)"; \
		echo "Générez les certificats avec: certbot --nginx -d your-domain.com"; \
	fi

# Scaling serveur
scale-dbt: ## Scale le service DBT serveur (usage: make scale-dbt REPLICAS=3)
	@echo "$(GREEN)Scaling du service DBT serveur...$(NC)"
	docker-compose -f $(COMPOSE_FILE) up -d --scale dbt-service=$(REPLICAS)

scale-quality: ## Scale le service de contrôle qualité serveur (usage: make scale-quality REPLICAS=2)
	@echo "$(GREEN)Scaling du service de contrôle qualité serveur...$(NC)"
	docker-compose -f $(COMPOSE_FILE) up -d --scale quality-control-service=$(REPLICAS)

# Utilitaires serveur
shell-api: ## Ouvrir un shell dans le container API serveur
	docker-compose -f $(COMPOSE_FILE) exec api-dashboard-service /bin/bash

shell-db: ## Ouvrir un shell dans le container base de données serveur
	docker-compose -f $(COMPOSE_FILE) exec warehouse-service /bin/bash

shell-nifi: ## Ouvrir un shell dans le container NiFi serveur
	docker-compose -f $(COMPOSE_FILE) exec nifi-service /bin/bash

# Statistiques serveur
stats: ## Afficher les statistiques des containers serveur
	@echo "$(GREEN)Statistiques des containers serveur:$(NC)"
	docker stats --no-stream

disk-usage: ## Afficher l'utilisation disque
	@echo "$(GREEN)Utilisation disque:$(NC)"
	df -h

memory-usage: ## Afficher l'utilisation mémoire
	@echo "$(GREEN)Utilisation mémoire:$(NC)"
	free -h

# Mise à jour serveur
update: ## Mettre à jour les images Docker serveur
	@echo "$(GREEN)Mise à jour des images Docker serveur...$(NC)"
	docker-compose -f $(COMPOSE_FILE) pull
	docker-compose -f $(COMPOSE_FILE) up -d

update-code: ## Mettre à jour le code et redéployer
	@echo "$(GREEN)Mise à jour du code et redéploiement...$(NC)"
	git pull
	make deploy

# Vérification des ports serveur
check-ports: ## Vérifier les ports utilisés sur le serveur
	@echo "$(GREEN)Vérification des ports serveur:$(NC)"
	@netstat -tulpn | grep -E ':(80|443|9000|9001|9002|9003|9004|9080|9090|9300|9543|9637)' || echo "Aucun port en conflit détecté"

check-ip: ## Afficher l'IP du serveur
	@echo "$(GREEN)IP du serveur:$(NC)"
	@hostname -I | awk '{print $$1}'

check-public-ip: ## Afficher l'IP publique du serveur
	@echo "$(GREEN)IP publique du serveur:$(NC)"
	@curl -s ifconfig.me

# Tests serveur
test-connectivity: ## Tester la connectivité des services serveur
	@echo "$(GREEN)Test de connectivité des services serveur:$(NC)"
	@SERVER_IP=$$(hostname -I | awk '{print $$1}'); \
	echo "Test API Dashboard: $$(curl -s -o /dev/null -w '%{http_code}' http://$$SERVER_IP/health || echo 'FAIL')"; \
	echo "Test NiFi: $$(curl -s -o /dev/null -w '%{http_code}' http://$$SERVER_IP/nifi/ || echo 'FAIL')"; \
	echo "Test Grafana: $$(curl -s -o /dev/null -w '%{http_code}' http://$$SERVER_IP/grafana/ || echo 'FAIL')"; \
	echo "Test Prometheus: $$(curl -s -o /dev/null -w '%{http_code}' http://$$SERVER_IP/prometheus/ || echo 'FAIL')"

# Documentation serveur
docs: ## Générer la documentation serveur
	@echo "$(GREEN)Documentation serveur disponible:$(NC)"
	@echo "  - Guide déploiement: DEPLOYMENT-SERVER.md"
	@echo "  - Dashboard: http://$$(hostname -I | awk '{print $$1}')/dashboard/"
	@echo "  - API Docs: http://$$(hostname -I | awk '{print $$1}')/api/docs"
	@echo "  - Grafana: http://$$(hostname -I | awk '{print $$1}')/grafana/"
	@echo "  - Prometheus: http://$$(hostname -I | awk '{print $$1}')/prometheus/"

# Sauvegarde automatique
backup: ## Sauvegarde complète du serveur
	@echo "$(GREEN)Sauvegarde complète du serveur...$(NC)"
	@DATE=$$(date +%Y%m%d_%H%M%S); \
	mkdir -p backups; \
	docker-compose -f $(COMPOSE_FILE) exec -T warehouse-service pg_dump -U warehouse_user data_warehouse > backups/db_backup_$$DATE.sql; \
	docker run --rm -v saas_postgres-data:/data -v $$(pwd)/backups:/backup alpine tar czf /backup/volumes_backup_$$DATE.tar.gz /data; \
	echo "Sauvegarde terminée: $$DATE"

# Nettoyage des logs
clean-logs: ## Nettoyer les logs du serveur
	@echo "$(RED)Nettoyage des logs serveur...$(NC)"
	docker-compose -f $(COMPOSE_FILE) logs --tail=0 > /dev/null

# Installation des dépendances de développement
install-dev: ## Installer les dépendances de développement serveur
	@echo "$(GREEN)Installation des dépendances de développement serveur...$(NC)"
	pip install -r tests/requirements.txt
	@echo "Dépendances installées avec succès!"

# Quick start serveur
quick-start: build up ## Démarrage rapide serveur (build + up)
	@echo "$(GREEN)Démarrage rapide serveur terminé!$(NC)"
	@echo "Services disponibles:"
	@SERVER_IP=$$(hostname -I | awk '{print $$1}'); \
	echo "  - Dashboard: http://$$SERVER_IP/dashboard/"; \
	echo "  - API Docs: http://$$SERVER_IP/api/docs"; \
	echo "  - NiFi: http://$$SERVER_IP/nifi/"; \
	echo "  - Grafana: http://$$SERVER_IP/grafana/"

# Configuration initiale complète
init-server: setup env deploy ## Configuration initiale complète du serveur
	@echo "$(GREEN)Configuration initiale complète terminée!$(NC)"
	@echo "$(YELLOW)N'oubliez pas de modifier les mots de passe dans .env$(NC)"

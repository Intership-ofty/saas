version: '3.8'

services:
  # ==================== SERVICE PRINCIPAL API/DASHBOARD ====================
  api-dashboard-service:
    build:
      context: ./api-dashboard-service
      dockerfile: Dockerfile
    container_name: api-dashboard-service
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://warehouse_user:warehouse_password@warehouse-service:5432/data_warehouse
      - NIFI_SERVICE_URL=http://nifi-service:8080
      - DBT_SERVICE_URL=http://dbt-service:8001
      - RECONCILIATION_SERVICE_URL=http://reconciliation-service:8002
      - QUALITY_CONTROL_SERVICE_URL=http://quality-control-service:8003
      - RCA_SERVICE_URL=http://rca-service:8004
      - SECRET_KEY=your-secret-key-here-change-in-production
      - DEBUG=false
    depends_on:
      - warehouse-service
    networks:
      - saas-network
    volumes:
      - ./api-dashboard-service/app:/app
      - dashboard-data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==================== SERVICE NIFI POUR INGESTION ====================
  nifi-service:
    build:
      context: ./nifi-service
      dockerfile: Dockerfile
    container_name: nifi-service
    ports:
      - "8080:8080"
      - "8443:8443"
      - "10000:10000"
      - "8000:8000"
    environment:
      - NIFI_WEB_HTTP_HOST=0.0.0.0
      - NIFI_WEB_HTTP_PORT=8080
      - NIFI_WEB_HTTPS_HOST=0.0.0.0
      - NIFI_WEB_HTTPS_PORT=8443
      - NIFI_CLUSTER_IS_NODE=false
      - NIFI_SENSITIVE_PROPS_KEY=
    networks:
      - saas-network
    volumes:
      - nifi-conf:/opt/nifi/nifi-current/conf
      - nifi-database:/opt/nifi/nifi-current/database_repository
      - nifi-flowfile:/opt/nifi/nifi-current/flowfile_repository
      - nifi-content:/opt/nifi/nifi-current/content_repository
      - nifi-provenance:/opt/nifi/nifi-current/provenance_repository
      - nifi-logs:/opt/nifi/nifi-current/logs
      - nifi-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/nifi/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==================== SERVICE DBT POUR TRANSFORMATION ====================
  dbt-service:
    build:
      context: ./dbt-service
      dockerfile: Dockerfile
    container_name: dbt-service
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://warehouse_user:warehouse_password@warehouse-service:5432/data_warehouse
      - PYTHONPATH=/app
      - DEBUG=false
    depends_on:
      - warehouse-service
    networks:
      - saas-network
    volumes:
      - ./dbt-service/app:/app
      - dbt-data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==================== SERVICE RÉCONCILIATION ZINGG ====================
  reconciliation-service:
    build:
      context: ./reconciliation-service
      dockerfile: Dockerfile
    container_name: reconciliation-service
    ports:
      - "8002:8002"
    environment:
      - DATABASE_URL=postgresql://warehouse_user:warehouse_password@warehouse-service:5432/data_warehouse
      - PYTHONPATH=/app
      - ZINGG_WORKSPACE=/tmp/zingg_workspace
      - ZINGG_MODEL_PATH=/tmp/zingg_models
      - DEBUG=false
    depends_on:
      - warehouse-service
    networks:
      - saas-network
    volumes:
      - ./reconciliation-service/app:/app
      - zingg-workspace:/tmp/zingg_workspace
      - zingg-models:/tmp/zingg_models
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==================== SERVICE CONTRÔLE QUALITÉ SODA ====================
  quality-control-service:
    build:
      context: ./quality-control-service
      dockerfile: Dockerfile
    container_name: quality-control-service
    ports:
      - "8003:8003"
    environment:
      - DATABASE_URL=postgresql://warehouse_user:warehouse_password@warehouse-service:5432/data_warehouse
      - PYTHONPATH=/app
      - SODA_CONFIG_PATH=/app/soda_config
      - SODA_CHECKS_PATH=/app/soda_checks
      - DEBUG=false
    depends_on:
      - warehouse-service
    networks:
      - saas-network
    volumes:
      - ./quality-control-service/app:/app
      - soda-config:/app/soda_config
      - soda-checks:/app/soda_checks
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==================== SERVICE RCA POUR ANALYSE DES CAUSES RACINES ====================
  rca-service:
    build:
      context: ./rca-service
      dockerfile: Dockerfile
    container_name: rca-service
    ports:
      - "8004:8004"
    environment:
      - DATABASE_URL=postgresql://warehouse_user:warehouse_password@warehouse-service:5432/data_warehouse
      - PYTHONPATH=/app
      - DEBUG=false
    depends_on:
      - warehouse-service
    networks:
      - saas-network
    volumes:
      - ./rca-service/app:/app
      - rca-data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==================== SERVICE WAREHOUSE POSTGRESQL ====================
  warehouse-service:
    build:
      context: ./warehouse-service
      dockerfile: Dockerfile
    container_name: warehouse-service
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=data_warehouse
      - POSTGRES_USER=warehouse_user
      - POSTGRES_PASSWORD=warehouse_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    networks:
      - saas-network
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./warehouse-service/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U warehouse_user -d data_warehouse"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==================== REDIS POUR CACHE ET SESSIONS ====================
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - saas-network
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ==================== NGINX POUR REVERSE PROXY ====================
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api-dashboard-service
      - nifi-service
    networks:
      - saas-network
    restart: unless-stopped

  # ==================== PROMETHEUS POUR MONITORING ====================
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - saas-network
    restart: unless-stopped

  # ==================== GRAFANA POUR VISUALISATION ====================
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - saas-network
    restart: unless-stopped

  # ==================== KAFKA POUR STREAMING (OPTIONNEL) ====================
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - saas-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    depends_on:
      - zookeeper
    networks:
      - saas-network
    volumes:
      - kafka-data:/var/lib/kafka/data
    restart: unless-stopped

  # ==================== MINIO POUR STOCKAGE OBJET (OPTIONNEL) ====================
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    command: server /data --console-address ":9001"
    networks:
      - saas-network
    volumes:
      - minio-data:/data
    restart: unless-stopped

# ==================== RÉSEAUX ====================
networks:
  saas-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ==================== VOLUMES PERSISTANTS ====================
volumes:
  # Volumes PostgreSQL
  postgres-data:
    driver: local
  
  # Volumes NiFi
  nifi-conf:
    driver: local
  nifi-database:
    driver: local
  nifi-flowfile:
    driver: local
  nifi-content:
    driver: local
  nifi-provenance:
    driver: local
  nifi-logs:
    driver: local
  nifi-data:
    driver: local
  
  # Volumes des services
  dbt-data:
    driver: local
  zingg-workspace:
    driver: local
  zingg-models:
    driver: local
  soda-config:
    driver: local
  soda-checks:
    driver: local
  rca-data:
    driver: local
  dashboard-data:
    driver: local
  
  # Volumes Redis
  redis-data:
    driver: local
  
  # Volumes monitoring
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  
  # Volumes streaming
  kafka-data:
    driver: local
  
  # Volumes stockage objet
  minio-data:
    driver: local
